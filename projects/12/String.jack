// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int addr;
    field int nextIndex;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 1) {
            let addr = -1;
            let nextIndex = -1;
            return this;
        }

        let addr = Memory.alloc(maxLength);
        let nextIndex = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (nextIndex = -1) {
            return;
        }

        do Memory.deAlloc(addr);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return nextIndex;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return addr[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let addr[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let addr[nextIndex] = c;
        let nextIndex = nextIndex + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let nextIndex = nextIndex - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, d, val;
        var bool isNegative;

        let i = 0;
        let val = 0;
        let isNegative = false;

        if (addr[0] = 45) {
            let i = i + 1;
            let isNegative = true;
        }

        while (i < nextIndex) {
            let d = addr[i] - 48;
            let val = (val * 10) + d;
            let i = i + 1;
        }

        if (isNegative = true) {
            return -val;
        } else {
            return val;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let nextIndex = 0;

        if (val < 0) {
            do appendChar(45);
        }

        do innerSetInt(Math.abs(val));
        return;
    }

    method void innerSetInt(int val) {
        var int lastDigit, c;
        var String result;

        let lastDigit = val - (10 * (val / 10));
        let c = lastDigit + 48;

        if (val > 9) {
            do innerSetInt(val / 10);
        }        

        do appendChar(c);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
