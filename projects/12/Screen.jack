// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static bool isBlackColor;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        let isBlackColor = true;

        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int row, col;

        let row = 0;
        while (row < 256) {
            let col = 0;
            while (col < 32) {
                do Memory.poke(16384 + (row * 32) + col, 0);
                let col = col + 1;
            }
            let row = row + 1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let isBlackColor = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, bit;

        let addr = 16384 + (y * 32) + (x / 16);
        let bit = x - (16 * (x / 16));

        if (isBlackColor) {
            do Memory.poke(addr, Memory.peek(addr) | twoToThe[bit]);
        } else {
            do Memory.poke(addr, Memory.peek(addr) & (~twoToThe[bit]));
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, diff, x, y, dx, dy, nx, ny;

        let a = 0;
        let b = 0;
        let x = x1;
        let y = y1;
        let diff = 0;
        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);

        if (dy = 0) {
            do Screen.drawHorizontalLine(x1, x2, y);
            return;
        }

        if (dx = 0) {
            while (~(b > dy)) {
                if ((y2 - y1) > 0) {
                    let ny = y + b;
                } else {
                    let ny = y - b;
                }

                do Screen.drawPixel(x, ny);
                let b = b + 1;
            }
            return;
        }

        while ((~(a > dx)) & (~(b > dy))) {
            if ((x2 - x1) > 0) {
                let nx = x + a;
            } else {
                let nx = x - a;
            }

            if ((y2 - y1) > 0) {
                let ny = y + b;
            } else {
                let ny = y - b;
            }

            do Screen.drawPixel(nx, ny);

            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            } else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }

        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {
        var int xs, xe, dx, cs, ce, be, val, i;

        let dx = Math.abs(x2 - x1);
        let xs = Math.min(x1, x2);
        let xe = Math.max(x1, x2);

        let cs = 16384 + (y * 32) + (xs / 16);
        let ce = 16384 + (y * 32) + (xe / 16);

        if (cs = ce) {
            let i = x1 - (16 * (x1 / 16));
            while (dx > -1) {
                if (isBlackColor) {
                    do Memory.poke(cs, Memory.peek(cs) | twoToThe[i + dx]);
                } else {
                    do Memory.poke(cs, Memory.peek(cs) & (~twoToThe[i + dx]));
                }

                let dx = dx - 1;
            }
            return;
        }

        let i = xs - (16 * (xs / 16));
        let val = Memory.peek(cs);
        while (i < 16) {
            if (isBlackColor) {
                let val = val | twoToThe[i];
            } else {
                let val = val & (~twoToThe[i]); 
            }

            let i = i + 1;
        }
        do Memory.poke(cs, val);

        let be = xe - (16 * (xe / 16));
        let val = Memory.peek(ce);
        let i = 0;
        while (~(i > be)) {
            if (isBlackColor) {
                let val = val | twoToThe[i];
            } else {
                let val = val & (~twoToThe[i]); 
            }

            let i = i + 1;
        }
        do Memory.poke(ce, val);
    
        let cs = cs + 1;
        while (~(cs = ce)) {
            if (isBlackColor) {
                do Memory.poke(cs, -1);
            } else {
                do Memory.poke(cs, 0);
            }

            let cs = cs + 1;
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;

        let y = y1;
        while (~(y > y2)) {
            do Screen.drawHorizontalLine(x1, x2, y);
            let y = y + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dr;

        let dy = -r;
        while (~(dy > r)) {
            let dr = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawHorizontalLine(x - dr, x + dr, y + dy);
            let dy = dy + 1;
        }

        return;
    }
}
