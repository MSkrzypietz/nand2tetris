// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory;
    static int freeList, lastFreeList;

    /** Initializes the class. */
    function void init() {
        let freeList = 2048;
        let memory[freeList] = 14336;
        let memory[freeList + 1] = 0;
        let lastFreeList = freeList;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int list, block;

        let list = Memory.findSuitableList(size);
        if (list = -1) {
            do Sys.error(404);
        }

        let memory[list] = memory[list] - size - 1;
        let block = list + memory[list] + 1;
        let memory[block - 1] = size + 1;

        return block;
    }

    function int findSuitableList(int size) {
        var int addr;
        let addr = freeList;

        while (~(addr = 0)) {
            if (memory[addr] > (size + 1)) {
                return addr;
            }
            let addr = memory[addr + 1];
        }

        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let memory[lastFreeList + 1] = o - 1;
        let lastFreeList = o - 1;
        let memory[lastFreeList + 1] = 0;
        return;
    }
}
